type Block @entity {
    id: ID!
    network: String! @index
    number: Int! @index
    timestamp: DateTime! @index
}

type Transaction @entity {
    id: ID!
    network: String! @index
    blockNumber: Int @index
    blockTimestamp: DateTime! @index
    hash: String! @index
    to: String @index
    from: String @index
    status: Int @index
}

# enum ItemType {
#     RENTAL,
#     PAYMENT
# }
#
# enum SettleTo {
#     LENDER,
#     RENTER
# }

type Item @entity {
  id: ID! @index
  rentalStarted: RentalStarted!

  # itemType: ItemType!
  # settleTo: SettleTo!
  itemType: Int!
  settleTo: Int!
  token: String! # address
  amount: BigInt! # uint256
  identifier: BigInt! # uint256
}

type Hook @entity {
  id: ID! @index
  rentalStarted: RentalStarted!

  target: String! # address
  itemIndex: BigInt! # uint256
  extraData: String! # bytes
}

type RentalStarted @entity {
    id: ID!
    network: String! @index
    blockNumber: Int! @index
    blockTimestamp: DateTime! @index
    transactionHash: String! @index
    contract: String! @index
    eventName: String! @index

    orderHash: String! @index # bytes32
    emittedExtraData: String! # bytes
    seaportOrderHash: String! @index # bytes32
    items: [Item!]! @derivedFrom(field: "rentalStarted")
    hooks: [Hook!]! @derivedFrom(field: "rentalStarted")
    lender: String! @index # address
    renter: String! @index # address
    rentalWallet: String! @index # address
    endTimestamp: BigInt! # uint256
}

type RentalStopped @entity {
    id: ID!
    network: String! @index
    blockNumber: Int! @index
    blockTimestamp: DateTime! @index
    transactionHash: String! @index
    contract: String! @index
    eventName: String! @index

    seaportOrderHash: String! @index
}
